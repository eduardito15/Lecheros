/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.mantenimiento;

import dominio.Reparto;
import dominio.RepartoCompuesto;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import sistema.SistemaMantenimiento;
import sistema.SistemaUsuarios;
import ui.usuarios.Constantes;

/**
 *
 * @author Edu
 */
public class MantenimientoRepartosCompuestos extends javax.swing.JDialog {

    private final SistemaMantenimiento sis;
    private RepartoCompuesto repartoCompuesto;
    private List<RepartoCompuesto> repartosCompuestos;
    
    
    /**
     * Creates new form MantenimientoRepartosCompuestos
     */
    public MantenimientoRepartosCompuestos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        sis = SistemaMantenimiento.getInstance();
        repartoCompuesto = new RepartoCompuesto();
        actualizarListaRepartos();
        jTextFieldCodigoReparto.requestFocus();
        jTextFieldCodigoReparto.selectAll();
        List<Reparto> reps = sis.devolverRepartos();
        for (Reparto r : reps) {
            jComboBoxReparto1.addItem(r);
            jComboBoxReparto2.addItem(r);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListRepartos = new javax.swing.JList();
        jButtonEliminar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombreReparto = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxReparto1 = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxReparto2 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldCodigoReparto = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento Repartos Compuestos");

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Reparto Compuesto");

        jListRepartos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListRepartosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListRepartos);

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre:");

        jTextFieldNombreReparto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNombreRepartoKeyPressed(evt);
            }
        });

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        jButtonGuardar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonGuardarKeyPressed(evt);
            }
        });

        jLabel3.setText("Reparto 1:");

        jComboBoxReparto1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxReparto1KeyPressed(evt);
            }
        });

        jLabel4.setText("Reparto 2:");

        jComboBoxReparto2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxReparto2KeyPressed(evt);
            }
        });

        jLabel5.setText("Codigo:");

        jTextFieldCodigoReparto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCodigoRepartoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(122, 122, 122))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldNombreReparto)
                            .addComponent(jComboBoxReparto1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxReparto2, 0, 200, Short.MAX_VALUE)
                            .addComponent(jTextFieldCodigoReparto))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCodigoReparto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldNombreReparto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBoxReparto1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBoxReparto2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSalir)
                .addGap(69, 69, 69))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jListRepartosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListRepartosMouseClicked
        // TODO add your handling code here:
        int seleccionado = jListRepartos.getSelectedIndex();
        if(seleccionado != -1){
            repartoCompuesto = repartosCompuestos.get(seleccionado);
            jTextFieldNombreReparto.setText(repartoCompuesto.getNombre());
        }
    }//GEN-LAST:event_jListRepartosMouseClicked

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        if(repartoCompuesto.getNombre() == null){
            JOptionPane.showMessageDialog(this, "Para eliminar un reparto compuesto, primero debes seleccionarlo de la lista.","Información",JOptionPane.INFORMATION_MESSAGE);
        } else {
            try{
                sis.eliminarRepartoCompuesto(repartoCompuesto);
                vaciarCampos();
                repartoCompuesto = new RepartoCompuesto();
                actualizarListaRepartos();
            }
            catch (HibernateException e){
                JOptionPane.showMessageDialog(this, "Error al eliminar el reparto compuesto." + "\n\n" + e.toString(),"Error",JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                String stakTrace = util.Util.obtenerStackTraceEnString(ex);
                SistemaUsuarios.getInstance().registrarExcepcion(ex.toString(), stakTrace);
                JOptionPane.showMessageDialog(this, "Error al eliminar el reparto compuesto." + "\n\n" + ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jTextFieldNombreRepartoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNombreRepartoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jComboBoxReparto1.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldNombreRepartoKeyPressed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        //Chequeo que los campos obligatorios no esten vacios
        if("".equals(jTextFieldCodigoReparto.getText().trim())){
            JOptionPane.showMessageDialog(this, "El reparto debe tener un codigo","Información",JOptionPane.INFORMATION_MESSAGE);
            jTextFieldCodigoReparto.requestFocus();
            jTextFieldCodigoReparto.selectAll();
        } else {
            if("".equals(jTextFieldNombreReparto.getText().trim())){
                JOptionPane.showMessageDialog(this, "El reparto debe tener un nombre","Información",JOptionPane.INFORMATION_MESSAGE);
                jTextFieldNombreReparto.requestFocus();
                jTextFieldNombreReparto.selectAll();
            } else {
                try {
                    SistemaMantenimiento sm = SistemaMantenimiento.getInstance();
                    //Agrego un camion nuevo
                    if (repartoCompuesto.getNombre() == null) {
                        //Chequeo que no exista un reparto con ese codigo
                        if(!codigoValido(jTextFieldCodigoReparto.getText())){
                            JOptionPane.showMessageDialog(this, "Ya existe un reparto con ese codigo", "Información", JOptionPane.INFORMATION_MESSAGE);
                            jTextFieldCodigoReparto.requestFocus();
                            jTextFieldCodigoReparto.selectAll();
                        } else {
                            //Si no existe con ese codigo, chequeo que no exista un reparto con ese nombre
                            int codigo = Integer.parseInt(jTextFieldCodigoReparto.getText());
                            if(!nombreValido(jTextFieldNombreReparto.getText())){
                                JOptionPane.showMessageDialog(this, "Ya existe un reparto con ese nombre", "Información", JOptionPane.INFORMATION_MESSAGE);
                                jTextFieldNombreReparto.requestFocus();
                                jTextFieldNombreReparto.selectAll();
                            } else {
                                //Si no existe ningun reparto con ese codigo ni con ese nombre, lo agrego.
                                Reparto reparto1 = (Reparto)jComboBoxReparto1.getSelectedItem();
                                Reparto reparto2 = (Reparto)jComboBoxReparto2.getSelectedItem();
                                if(reparto1.equals(reparto2)) {
                                    JOptionPane.showMessageDialog(this, "El reparto 1 no puede ser igual al reparto 2.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    jComboBoxReparto1.requestFocus();
                                } else {
                                    if (sm.agregarRepartoCompuesto(codigo, jTextFieldNombreReparto.getText(),reparto1, reparto2)) {
                                        vaciarCampos();
                                        repartoCompuesto = new RepartoCompuesto();
                                        actualizarListaRepartos();
                                    } else {
                                        //Aca llega si no puede agregar el reparto, por algun error en la base de datos.
                                        JOptionPane.showMessageDialog(this, "Error al guardar el reparto.", "Información", JOptionPane.ERROR_MESSAGE);
                                    }
                                }
                            }

                        }

                    } else {
                        //Actualizo un camion ya existente
                        //Veo si intentan actualizar el codigo
                        if(! (repartoCompuesto.getCodigo() == Integer.parseInt(jTextFieldCodigoReparto.getText()))){
                            //Si intentan actualizar el codigo chequeo que el nuevo codigo sea valido
                            if (!codigoValido(jTextFieldCodigoReparto.getText())) {
                                JOptionPane.showMessageDialog(this, "Ya existe un reparto con ese codigo", "Información", JOptionPane.INFORMATION_MESSAGE);
                                jTextFieldCodigoReparto.requestFocus();
                                jTextFieldCodigoReparto.selectAll();
                            } else {
                                //Si es valido el nuevo codigo, reviso el nombre si ha cambiado
                                if(!(repartoCompuesto.getNombre().equals(jTextFieldNombreReparto.getText()))){
                                    //Si intentan actualizar el nombre, chequeo que sea un nombre valido el nuevo
                                    if(!nombreValido(jTextFieldNombreReparto.getText())){
                                        JOptionPane.showMessageDialog(this, "Ya existe un reparto con ese nombre", "Información", JOptionPane.INFORMATION_MESSAGE);
                                        jTextFieldNombreReparto.requestFocus();
                                        jTextFieldNombreReparto.selectAll();
                                    } else {
                                        //Actualizo los datos del camion
                                        if ((jComboBoxReparto1.getSelectedItem()).equals(jComboBoxReparto2.getSelectedItem())) {
                                            JOptionPane.showMessageDialog(this, "El reparto 1 no puede ser igual al reparto 2.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                            jComboBoxReparto1.requestFocus();
                                        } else {
                                            repartoCompuesto.setCodigo(Integer.parseInt(jTextFieldCodigoReparto.getText()));
                                            repartoCompuesto.setNombre(jTextFieldNombreReparto.getText());
                                            repartoCompuesto.setReparto1((Reparto)jComboBoxReparto1.getSelectedItem());
                                            repartoCompuesto.setReparto2((Reparto)jComboBoxReparto2.getSelectedItem());
                                            sis.actualizarRepartoCompuesto(repartoCompuesto);
                                            vaciarCampos();
                                            repartoCompuesto = new RepartoCompuesto();
                                            actualizarListaRepartos();
                                        }
                                    }
                                } else {
                                    if ((jComboBoxReparto1.getSelectedItem()).equals(jComboBoxReparto2.getSelectedItem())) {
                                        JOptionPane.showMessageDialog(this, "El reparto 1 no puede ser igual al reparto 2.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                        jComboBoxReparto1.requestFocus();
                                    } else {
                                        repartoCompuesto.setCodigo(Integer.parseInt(jTextFieldCodigoReparto.getText()));
                                        repartoCompuesto.setNombre(jTextFieldNombreReparto.getText());
                                        repartoCompuesto.setReparto1((Reparto)jComboBoxReparto1.getSelectedItem());
                                        repartoCompuesto.setReparto2((Reparto)jComboBoxReparto2.getSelectedItem());
                                        sis.actualizarRepartoCompuesto(repartoCompuesto);
                                        vaciarCampos();
                                        repartoCompuesto = new RepartoCompuesto();
                                        actualizarListaRepartos();
                                    }
                                }
                            }
                        } else {
                            //Si no quiere actualizar el codigo de camion, chequeo el cambio de nombre
                            if(!repartoCompuesto.getNombre().equals(jTextFieldNombreReparto.getText())){
                                //Si intentan actualizar el nombre, chequeo que sea un nombre valido el nuevo
                                if(!nombreValido(jTextFieldNombreReparto.getText())){
                                    JOptionPane.showMessageDialog(this, "Ya existe un reparto con ese nombre", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    jTextFieldNombreReparto.requestFocus();
                                    jTextFieldNombreReparto.selectAll();
                                } else {
                                    //Actualizo los datos del camion
                                    if ((jComboBoxReparto1.getSelectedItem()).equals(jComboBoxReparto2.getSelectedItem())) {
                                        JOptionPane.showMessageDialog(this, "El reparto 1 no puede ser igual al reparto 2.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                        jComboBoxReparto1.requestFocus();
                                    } else {
                                        repartoCompuesto.setCodigo(Integer.parseInt(jTextFieldCodigoReparto.getText()));
                                        repartoCompuesto.setNombre(jTextFieldNombreReparto.getText());
                                        repartoCompuesto.setReparto1((Reparto)jComboBoxReparto1.getSelectedItem());
                                        repartoCompuesto.setReparto2((Reparto)jComboBoxReparto2.getSelectedItem());
                                        sis.actualizarRepartoCompuesto(repartoCompuesto);
                                        vaciarCampos();
                                        repartoCompuesto = new RepartoCompuesto();
                                        actualizarListaRepartos();
                                    }
                                }
                            } else {
                                //Actualizo los datos del camion
                                if ((jComboBoxReparto1.getSelectedItem()).equals(jComboBoxReparto2.getSelectedItem())) {
                                    JOptionPane.showMessageDialog(this, "El reparto 1 no puede ser igual al reparto 2.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    jComboBoxReparto1.requestFocus();
                                } else {
                                    repartoCompuesto.setCodigo(Integer.parseInt(jTextFieldCodigoReparto.getText()));
                                    repartoCompuesto.setNombre(jTextFieldNombreReparto.getText());
                                    sis.actualizarRepartoCompuesto(repartoCompuesto);
                                    vaciarCampos();
                                    repartoCompuesto = new RepartoCompuesto();
                                    actualizarListaRepartos();
                                }
                            }
                        }
                    }
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(this, "El codigo de reparto debe ser un numero entero.","Información",JOptionPane.INFORMATION_MESSAGE);
                    jTextFieldCodigoReparto.requestFocus();
                    jTextFieldCodigoReparto.selectAll();
                } catch (Exception e) {
                    String stakTrace = util.Util.obtenerStackTraceEnString(e);
                    SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
                    JOptionPane.showMessageDialog(this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonGuardarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonGuardarKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jButtonGuardar.doClick();
        }
    }//GEN-LAST:event_jButtonGuardarKeyPressed

    private void jTextFieldCodigoRepartoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodigoRepartoKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jTextFieldNombreReparto.requestFocus();
            jTextFieldNombreReparto.selectAll();
        }
    }//GEN-LAST:event_jTextFieldCodigoRepartoKeyPressed

    private void jComboBoxReparto1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxReparto1KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jComboBoxReparto2.requestFocus();;
        }
    }//GEN-LAST:event_jComboBoxReparto1KeyPressed

    private void jComboBoxReparto2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxReparto2KeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jButtonGuardar.requestFocus();
        }
    }//GEN-LAST:event_jComboBoxReparto2KeyPressed

    private void actualizarListaRepartos(){
        repartosCompuestos = sis.devolverRepartosCompuestos();
        
        DefaultListModel modelo = new DefaultListModel();
        for (RepartoCompuesto r : repartosCompuestos) {
            modelo.addElement(r);
        }
        
        jListRepartos.setModel(modelo);
    }
    
    private void vaciarCampos(){
        jTextFieldCodigoReparto.setText("");
        jTextFieldNombreReparto.setText("");
    }
    
    private boolean codigoValido(String cod){
        boolean retorno = true;
        for(RepartoCompuesto rc:repartosCompuestos){
            if(Integer.toString(rc.getCodigo()).equals(cod)){
                retorno = false;
                break;
            }
        }
        return retorno;
    }
    
    private boolean nombreValido(String nom){
        boolean retorno = true;
        for(RepartoCompuesto rc:repartosCompuestos){
            if(rc.getNombre().equals(nom)){
                retorno = false;
                break;
            }
        }
        return retorno;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRepartosCompuestos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRepartosCompuestos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRepartosCompuestos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRepartosCompuestos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MantenimientoRepartosCompuestos dialog = new MantenimientoRepartosCompuestos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox jComboBoxReparto1;
    private javax.swing.JComboBox jComboBoxReparto2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jListRepartos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCodigoReparto;
    private javax.swing.JTextField jTextFieldNombreReparto;
    // End of variables declaration//GEN-END:variables
}
