/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.mantenimiento;

import dominio.Chofer;
import dominio.Comision;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import sistema.SistemaMantenimiento;
import sistema.SistemaUsuarios;
import ui.usuarios.Constantes;

/**
 *
 * @author Edu
 */
public class MantenimientoChoferes extends javax.swing.JDialog {

    private final SistemaMantenimiento sis;
    private List<Chofer> choferes;
    private Chofer chofer;

    /**
     * Creates new form MantenimientoChoferes
     */
    public MantenimientoChoferes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        sis = SistemaMantenimiento.getInstance();
        chofer = new Chofer();
        actualizarListaChoferes();
        List<Comision> comisiones = sis.devolverComisiones();
        for (Comision c : comisiones) {
            jComboBoxComisiones.addItem(c);
        }
        jTextFieldCodigo.requestFocus();
        jTextFieldCodigo.selectAll();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombreChofer = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListChoferes = new javax.swing.JList();
        jButtonEliminar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxComisiones = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldCodigo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento Choferes");

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre: ");

        jTextFieldNombreChofer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNombreChoferKeyPressed(evt);
            }
        });

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });
        jButtonGuardar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonGuardarKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Choferes");

        jListChoferes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListChoferesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListChoferes);

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        jLabel3.setText("Comision:");

        jComboBoxComisiones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxComisionesKeyPressed(evt);
            }
        });

        jLabel4.setText("Codigo:");

        jTextFieldCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldCodigoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(233, 233, 233)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextFieldNombreChofer)
                                        .addComponent(jComboBoxComisiones, 0, 200, Short.MAX_VALUE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(85, 85, 85))))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextFieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldNombreChofer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBoxComisiones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalir)))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        try{
            if ("".equals(jTextFieldNombreChofer.getText().trim())) {
                JOptionPane.showMessageDialog(this, "El chofer debe tener un nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldNombreChofer.requestFocus();
                jTextFieldNombreChofer.selectAll();
            } else {
                //Verifico que no exista un chofer con ese nombre
                SistemaMantenimiento sm = SistemaMantenimiento.getInstance();
                if (chofer.getNombre() == null) {
                    //Aca se agrega un nuevo chofer
                    //Verifico que sea un nombre valido, que no este repetido
                    if (!nombreValido(jTextFieldNombreChofer.getText())) {
                        JOptionPane.showMessageDialog(this, "Ya existe un chofer con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        jTextFieldNombreChofer.requestFocus();
                        jTextFieldNombreChofer.selectAll();
                    } else {
                        try {
                            int codigo = Integer.parseInt(jTextFieldCodigo.getText().trim());
                            if (sm.agregarChofer(codigo, jTextFieldNombreChofer.getText(), (Comision) jComboBoxComisiones.getSelectedItem())) {
                                jTextFieldNombreChofer.setText("");
                                jTextFieldCodigo.setEditable(true);
                                jTextFieldCodigo.setText("");
                 
                                chofer = new Chofer();
                                actualizarListaChoferes();
                                jTextFieldCodigo.requestFocus();
                                jTextFieldCodigo.selectAll();
                            } else {
                                JOptionPane.showMessageDialog(this, "Error al guardar el chofer.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (NumberFormatException ne) {
                            JOptionPane.showMessageDialog(this, "El codigo debe ser un numero entero.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            jTextFieldCodigo.requestFocus();
                            jTextFieldCodigo.selectAll();
                        } catch (Exception ex) {
                            String stakTrace = util.Util.obtenerStackTraceEnString(ex);
                            SistemaUsuarios.getInstance().registrarExcepcion(ex.toString(), stakTrace);
                            JOptionPane.showMessageDialog(this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                } else //Aca se actualiza un chofer existente
                //Chequeo se quiere cambiar el nombre
                {
                    if (!chofer.getNombre().equals(jTextFieldNombreChofer.getText())) {
                        //Si quiere cambiar el nombre, verifico que sea un nombre valido
                        if (!nombreValido(jTextFieldNombreChofer.getText())) {
                            JOptionPane.showMessageDialog(this, "Ya existe un chofer con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            jTextFieldNombreChofer.requestFocus();
                            jTextFieldNombreChofer.selectAll();
                        } else {
                            //Si el nombre es valido actualizo los datos
                            chofer.setNombre(jTextFieldNombreChofer.getText());
                            chofer.setComision((Comision) jComboBoxComisiones.getSelectedItem());
                            sis.actualizarChofer(chofer);
                            jTextFieldNombreChofer.setText("");
                            jTextFieldCodigo.setEditable(true);
                            jTextFieldCodigo.setText("");
                            chofer = new Chofer();
                            actualizarListaChoferes();
                            jTextFieldCodigo.requestFocus();
                            jTextFieldCodigo.selectAll();
                        }
                    } else {
                        //Si no quiere cambiar el nombre todo bien, se guarda con el mismo nombre
                        chofer.setNombre(jTextFieldNombreChofer.getText());
                        chofer.setComision((Comision) jComboBoxComisiones.getSelectedItem());
                        sis.actualizarChofer(chofer);
                        jTextFieldNombreChofer.setText("");
                        jTextFieldCodigo.setEditable(true);
                        jTextFieldCodigo.setText("");
                        chofer = new Chofer();
                        actualizarListaChoferes();
                        jTextFieldCodigo.requestFocus();
                        jTextFieldCodigo.selectAll();
                    }
                }
            }
        } catch (HibernateException e){
            JOptionPane.showMessageDialog(this, "Error al guardar el chofer. Error:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            String stakTrace = util.Util.obtenerStackTraceEnString(e);
            SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
            JOptionPane.showMessageDialog(this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jListChoferesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListChoferesMouseClicked
        // TODO add your handling code here:
        int seleccionado = jListChoferes.getSelectedIndex();
        if (seleccionado != -1) {
            chofer = choferes.get(seleccionado);
            jTextFieldCodigo.setText(Integer.toString(chofer.getCodigo()));
            jTextFieldNombreChofer.setText(chofer.getNombre());
            //jComboBoxComisiones.setSelectedItem(chofer.getComision());
            int indiceComision = devolverIndiceComision(chofer.getComision());
            jComboBoxComisiones.setSelectedIndex(indiceComision);
            jTextFieldCodigo.setText(Integer.toString(chofer.getCodigo()));
            jTextFieldCodigo.setEditable(false);
        }
    }//GEN-LAST:event_jListChoferesMouseClicked

    public int devolverIndiceComision(Comision c) {
        int retorno = 0;
        List<Comision> comisiones = sis.devolverComisiones();
        for (int i = 0; i < comisiones.size(); i++) {
            Comision aux = comisiones.get(i);
            if (c.equals(aux)) {
                retorno = i;
            }
        }
        return retorno;
    }
    
    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        try {
            if (chofer.getNombre() == null) {
                JOptionPane.showMessageDialog(this, "Para eliminar un chofer, primero debes seleccionarlo de la lista.");
            } else {
                sis.eliminarChofer(chofer);
                jTextFieldNombreChofer.setText("");
                jTextFieldCodigo.setEditable(true);
                jTextFieldCodigo.setText("");
                chofer = new Chofer();
                actualizarListaChoferes();
            }
        } catch (HibernateException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar el chofer." + "\n\n" + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            String stakTrace = util.Util.obtenerStackTraceEnString(ex);
            SistemaUsuarios.getInstance().registrarExcepcion(ex.toString(), stakTrace);
            JOptionPane.showMessageDialog(this, "Error al eliminar el chofer." + "\n\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jTextFieldNombreChoferKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNombreChoferKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jComboBoxComisiones.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldNombreChoferKeyPressed

    private void jComboBoxComisionesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxComisionesKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButtonGuardar.requestFocus();
        }
    }//GEN-LAST:event_jComboBoxComisionesKeyPressed

    private void jButtonGuardarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonGuardarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButtonGuardar.doClick();
        }
    }//GEN-LAST:event_jButtonGuardarKeyPressed

    private void jTextFieldCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodigoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try{
                int codigo = Integer.parseInt(jTextFieldCodigo.getText().trim());
                jTextFieldNombreChofer.requestFocus();
                jTextFieldNombreChofer.selectAll();
            } catch (NumberFormatException ne){
                JOptionPane.showMessageDialog(this, "El codigo debe ser un numero entero.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldCodigo.requestFocus();
                jTextFieldCodigo.selectAll();
            } catch (Exception e) {
                String stakTrace = util.Util.obtenerStackTraceEnString(e);
                SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
                JOptionPane.showMessageDialog(this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jTextFieldCodigoKeyPressed

    private void actualizarListaChoferes() {
        choferes = sis.devolverChoferes();

        DefaultListModel modelo = new DefaultListModel();
        for (Chofer chofere : choferes) {
            modelo.addElement(chofere);
        }

        jListChoferes.setModel(modelo);
    }

    private boolean nombreValido(String nom) {
        boolean retorno = true;
        for (Chofer c : choferes) {
            if (c.getNombre().equals(nom)) {
                retorno = false;
                break;
            }
        }
        return retorno;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoChoferes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoChoferes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoChoferes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoChoferes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MantenimientoChoferes dialog = new MantenimientoChoferes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox jComboBoxComisiones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jListChoferes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCodigo;
    private javax.swing.JTextField jTextFieldNombreChofer;
    // End of variables declaration//GEN-END:variables
}
