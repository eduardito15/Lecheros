/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.mantenimiento;

import dominio.FamiliaDeProducto;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import sistema.SistemaMantenimiento;
import sistema.SistemaUsuarios;
import ui.usuarios.Constantes;

/**
 *
 * @author Edu
 */
public class MantenimientoFamiliaDeProductos extends javax.swing.JDialog {

    private final SistemaMantenimiento sis;
    private FamiliaDeProducto familiaDeProducto;
    private List<FamiliaDeProducto> familiasDeProductos;
    /**
     * Creates new form MantenimientoFamiliaDeProductos
     */
    public MantenimientoFamiliaDeProductos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        sis = SistemaMantenimiento.getInstance();
        familiaDeProducto = new FamiliaDeProducto();
        actualizarListaFamiliasDeProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextFieldNombreFamiliaDeProducto = new javax.swing.JTextField();
        jButtonSalir = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldCodigoFamiliaDeProducto = new javax.swing.JTextField();
        jButtonGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFamiliasDeProductos = new javax.swing.JList();
        jButtonEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento de Familias de Productos");

        jLabel3.setText("Nombre:");

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });

        jLabel2.setText("Codigo: ");

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Familias de Productos");

        jListFamiliasDeProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListFamiliasDeProductosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListFamiliasDeProductos);

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButtonGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonSalir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCodigoFamiliaDeProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldNombreFamiliaDeProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(196, 196, 196))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldCodigoFamiliaDeProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextFieldNombreFamiliaDeProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jButtonGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSalir))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        if("".equals(jTextFieldCodigoFamiliaDeProducto.getText().trim())){
            JOptionPane.showMessageDialog(this, "La familia debe tener un codigo.","Información",JOptionPane.INFORMATION_MESSAGE);
            jTextFieldCodigoFamiliaDeProducto.requestFocus();
            jTextFieldCodigoFamiliaDeProducto.selectAll();
        } else {
            if("".equals(jTextFieldNombreFamiliaDeProducto.getText().trim())){
                JOptionPane.showMessageDialog(this, "La familia debe tener un nombre.","Información",JOptionPane.INFORMATION_MESSAGE);
                jTextFieldNombreFamiliaDeProducto.requestFocus();
                jTextFieldNombreFamiliaDeProducto.selectAll();
            } else {
                //Aca entra a guardar una familia de producto
                try {
                    SistemaMantenimiento sm = SistemaMantenimiento.getInstance();
                    if (familiaDeProducto.getNombre() == null) {
                        //Es una familia nueva
                        if(!codigoValido(jTextFieldCodigoFamiliaDeProducto.getText())){
                            //El codigo no es valido
                            JOptionPane.showMessageDialog(this, "Ya existe una familia con ese codigo.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            jTextFieldCodigoFamiliaDeProducto.requestFocus();
                            jTextFieldCodigoFamiliaDeProducto.selectAll();
                        } else {
                            //El codigo es valido. Verifico el nombre
                            if(!nombreValido(jTextFieldNombreFamiliaDeProducto.getText())){
                                //El nombre no es valido
                                JOptionPane.showMessageDialog(this, "Ya existe una familia con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                jTextFieldNombreFamiliaDeProducto.requestFocus();
                                jTextFieldNombreFamiliaDeProducto.selectAll();
                            } else {
                                //El nombre es valido. Agrego la nueva familia
                                int codigo = Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText());
                                if (sm.agregarFamiliaDeProductos(codigo, jTextFieldNombreFamiliaDeProducto.getText())) {
                                    jTextFieldCodigoFamiliaDeProducto.setText("");
                                    jTextFieldNombreFamiliaDeProducto.setText("");
                                    familiaDeProducto = new FamiliaDeProducto();
                                    actualizarListaFamiliasDeProductos();
                                } else {
                                    JOptionPane.showMessageDialog(this, "Error al ingresar la nueva familia de productos.","Error",JOptionPane.ERROR_MESSAGE);
                                }
                            }
                        }
                    } else {
                        //Aca entra para actualizar una familia de productos
                        //Verifico si quiere modifcar el codigo
                        if(!(familiaDeProducto.getCodigo() == Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText()))){
                            //Quiere modificar el codigo
                            //Verifico que el codigo sea valido.
                            if(!codigoValido(jTextFieldCodigoFamiliaDeProducto.getText())){
                                //El codigo no es valido
                                JOptionPane.showMessageDialog(this, "Ya existe una familia con ese codigo.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                jTextFieldCodigoFamiliaDeProducto.requestFocus();
                                jTextFieldCodigoFamiliaDeProducto.selectAll();
                            } else {
                                //El codigo que quiere modificar es valido
                                //Verifico que quiera cambiar el nombre
                                if(!familiaDeProducto.getNombre().equals(jTextFieldNombreFamiliaDeProducto.getText())){
                                    //Quiere modificar el nombre
                                    //Verifico que el nuevo nombre sea valido
                                    if(!nombreValido(jTextFieldNombreFamiliaDeProducto.getText())){
                                        //El nuevo nombre no es valido
                                        JOptionPane.showMessageDialog(this, "Ya existe una familia con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                        jTextFieldNombreFamiliaDeProducto.requestFocus();
                                        jTextFieldNombreFamiliaDeProducto.selectAll();
                                    } else {
                                        //El nombre es valido
                                        familiaDeProducto.setCodigo(Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText()));
                                        familiaDeProducto.setNombre(jTextFieldNombreFamiliaDeProducto.getText());
                                        sis.actualizarFamiliaDeProductos(familiaDeProducto);
                                        jTextFieldCodigoFamiliaDeProducto.setText("");
                                        jTextFieldNombreFamiliaDeProducto.setText("");
                                        familiaDeProducto = new FamiliaDeProducto();
                                        actualizarListaFamiliasDeProductos();
                                    }
                                } else {
                                    //No quiere modificar el nombre y el codigo es valido
                                    familiaDeProducto.setCodigo(Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText()));
                                    familiaDeProducto.setNombre(jTextFieldNombreFamiliaDeProducto.getText());
                                    sis.actualizarFamiliaDeProductos(familiaDeProducto);
                                    jTextFieldCodigoFamiliaDeProducto.setText("");
                                    jTextFieldNombreFamiliaDeProducto.setText("");
                                    familiaDeProducto = new FamiliaDeProducto();
                                    actualizarListaFamiliasDeProductos();
                                }
                            }
                        } else {
                            //No quiere modificar el codigo
                            //Verifico si quiere modificar el nombre
                            if(!familiaDeProducto.getNombre().equals(jTextFieldNombreFamiliaDeProducto.getText())){
                                //Quiere modificar el nombre
                                //Verifico que el nombre sea valido
                                if (!nombreValido(jTextFieldNombreFamiliaDeProducto.getText())) {
                                    //El nuevo nombre no es valido
                                    JOptionPane.showMessageDialog(this, "Ya existe una familia con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                    jTextFieldNombreFamiliaDeProducto.requestFocus();
                                    jTextFieldNombreFamiliaDeProducto.selectAll();
                                } else {
                                    //El nombre es valido
                                    familiaDeProducto.setCodigo(Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText()));
                                    familiaDeProducto.setNombre(jTextFieldNombreFamiliaDeProducto.getText());
                                    sis.actualizarFamiliaDeProductos(familiaDeProducto);
                                    jTextFieldCodigoFamiliaDeProducto.setText("");
                                    jTextFieldNombreFamiliaDeProducto.setText("");
                                    familiaDeProducto = new FamiliaDeProducto();
                                    actualizarListaFamiliasDeProductos();
                                }
                            } else {
                                //No quiere modificar el nombre
                                familiaDeProducto.setCodigo(Integer.parseInt(jTextFieldCodigoFamiliaDeProducto.getText()));
                                familiaDeProducto.setNombre(jTextFieldNombreFamiliaDeProducto.getText());
                                sis.actualizarFamiliaDeProductos(familiaDeProducto);
                                jTextFieldCodigoFamiliaDeProducto.setText("");
                                jTextFieldNombreFamiliaDeProducto.setText("");
                                familiaDeProducto = new FamiliaDeProducto();
                                actualizarListaFamiliasDeProductos();
                            }
                            
                        }
                    }
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(this, "El codigo debe ser un numero entero", "Información", JOptionPane.INFORMATION_MESSAGE);
                    jTextFieldCodigoFamiliaDeProducto.requestFocus();
                    jTextFieldCodigoFamiliaDeProducto.selectAll();
                } catch (Exception e) {
                    String stakTrace = util.Util.obtenerStackTraceEnString(e);
                    SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
                    JOptionPane.showMessageDialog(this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
                }   
            }
        }
        
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jListFamiliasDeProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListFamiliasDeProductosMouseClicked
        // TODO add your handling code here:
        int seleccionado = jListFamiliasDeProductos.getSelectedIndex();
        if(seleccionado != -1){
            familiaDeProducto = familiasDeProductos.get(seleccionado);
            jTextFieldCodigoFamiliaDeProducto.setText(Integer.toString(familiaDeProducto.getCodigo()));
            jTextFieldNombreFamiliaDeProducto.setText(familiaDeProducto.getNombre());
        }
    }//GEN-LAST:event_jListFamiliasDeProductosMouseClicked

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
        // TODO add your handling code here:
        try{
            if (familiaDeProducto.getNombre() == null) {
                JOptionPane.showMessageDialog(this, "Para eliminar una familia de productos, primero debes seleccionarla de la lista.");
            } else {
                sis.eliminarFamiliaDeProductos(familiaDeProducto);
                jTextFieldCodigoFamiliaDeProducto.setText("");
                jTextFieldNombreFamiliaDeProducto.setText("");
                familiaDeProducto = new FamiliaDeProducto();
                actualizarListaFamiliasDeProductos();
            }
        }
        catch (HibernateException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar la familia de producto." + "\n\n" + e.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            String stakTrace = util.Util.obtenerStackTraceEnString(ex);
            SistemaUsuarios.getInstance().registrarExcepcion(ex.toString(), stakTrace);    
            JOptionPane.showMessageDialog(this, "Error al eliminar la familia de producto." + "\n\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void actualizarListaFamiliasDeProductos(){
        familiasDeProductos = sis.devolverFamiliaDeProductos();
        
        DefaultListModel modelo = new DefaultListModel();
        for (FamiliaDeProducto fp : familiasDeProductos) {
            modelo.addElement(fp);
        }
        
        jListFamiliasDeProductos.setModel(modelo);
    }
    
    private boolean codigoValido(String codigo){
        boolean retorno = true;
        for(FamiliaDeProducto fp : familiasDeProductos){
            if(Integer.toString(fp.getCodigo()).equals(codigo)){
                retorno = false;
                break;
            }
        }
        return retorno;
    }
    
    private boolean nombreValido(String nombre){
        boolean retorno = true;
        for(FamiliaDeProducto fp : familiasDeProductos){
            if(fp.getNombre().equals(nombre)){
                retorno = false;
                break;
            }
        }
        return retorno;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoFamiliaDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoFamiliaDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoFamiliaDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoFamiliaDeProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MantenimientoFamiliaDeProductos dialog = new MantenimientoFamiliaDeProductos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jListFamiliasDeProductos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldCodigoFamiliaDeProducto;
    private javax.swing.JTextField jTextFieldNombreFamiliaDeProducto;
    // End of variables declaration//GEN-END:variables
}
