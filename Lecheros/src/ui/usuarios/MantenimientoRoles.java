/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.usuarios;

import dominio.usuarios.Actividad;
import dominio.usuarios.Rol;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import sistema.SistemaUsuarios;

/**
 *
 * @author Edu
 */
public class MantenimientoRoles extends javax.swing.JDialog {

    private final SistemaUsuarios sisUsuarios;

    private List<Actividad> actividades;
    private List<Actividad> actividadesDelRol;
    private List<Rol> roles;

    private Rol rol;

    /**
     * Creates new form MantenimientoRoles
     */
    public MantenimientoRoles(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        sisUsuarios = SistemaUsuarios.getInstance();
        actividadesDelRol = new ArrayList<>();
        actualizarListaActividades();
        jComboBoxRoles.addItem("");
        try {
            roles = sisUsuarios.devolverRoles();
        } catch (Exception exp) {
            String stakTrace = util.Util.obtenerStackTraceEnString(exp);
            SistemaUsuarios.getInstance().registrarExcepcion(exp.toString(), stakTrace);
            JOptionPane.showMessageDialog(MantenimientoRoles.this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
        }
        for (Rol r : roles) {
            jComboBoxRoles.addItem(r);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxRoles = new javax.swing.JComboBox();
        jButtonModificar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListActividadesDelRol = new javax.swing.JList();
        jButtonPasarARol = new javax.swing.JButton();
        jButtonQuitarDeRol = new javax.swing.JButton();
        jButtonPasarTodasARol = new javax.swing.JButton();
        jButtonQuitarTodasDeRol = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListActividades = new javax.swing.JList();
        jButtonGuardar = new javax.swing.JButton();
        jButtonSalir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenimiento Roles");

        jLabelTitulo.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabelTitulo.setForeground(new java.awt.Color(0, 0, 255));
        jLabelTitulo.setText("Roles");

        jLabel1.setText("Roles:");

        jComboBoxRoles.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBoxRolesKeyPressed(evt);
            }
        });

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jLabel2.setText("Nombre:");

        jTextFieldNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNombreKeyPressed(evt);
            }
        });

        jLabel3.setText("Actividades del Rol");

        jScrollPane1.setViewportView(jListActividadesDelRol);

        jButtonPasarARol.setText("<-");
        jButtonPasarARol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPasarARolActionPerformed(evt);
            }
        });

        jButtonQuitarDeRol.setText("->");
        jButtonQuitarDeRol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitarDeRolActionPerformed(evt);
            }
        });

        jButtonPasarTodasARol.setText("<<-");
        jButtonPasarTodasARol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPasarTodasARolActionPerformed(evt);
            }
        });

        jButtonQuitarTodasDeRol.setText("->>");
        jButtonQuitarTodasDeRol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitarTodasDeRolActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jListActividades);

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jButtonSalir.setText("Salir");
        jButtonSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalirActionPerformed(evt);
            }
        });
        jButtonSalir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonSalirKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxRoles, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonModificar))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jButtonSalir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButtonPasarARol)
                                            .addComponent(jButtonQuitarDeRol)
                                            .addComponent(jButtonPasarTodasARol)
                                            .addComponent(jButtonQuitarTodasDeRol))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addComponent(jLabelTitulo)))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabelTitulo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModificar))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButtonPasarTodasARol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonPasarARol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonQuitarDeRol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonQuitarTodasDeRol)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGuardar)
                .addGap(2, 2, 2)
                .addComponent(jButtonSalir)
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxRolesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBoxRolesKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (jComboBoxRoles.getSelectedIndex() == 0) {
                jTextFieldNombre.requestFocus();
                jTextFieldNombre.selectAll();
            }
        }
    }//GEN-LAST:event_jComboBoxRolesKeyPressed

    private void jTextFieldNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNombreKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButtonGuardar.requestFocus();
        }
    }//GEN-LAST:event_jTextFieldNombreKeyPressed

    private void jButtonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButtonSalirActionPerformed

    private void jButtonSalirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonSalirKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jButtonSalir.doClick();
        }
    }//GEN-LAST:event_jButtonSalirKeyPressed

    private void jButtonPasarTodasARolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPasarTodasARolActionPerformed
        // TODO add your handling code here:
        actividadesDelRol = new ArrayList<>();
        actividadesDelRol.addAll(actividades);
        actualizarListaActividadesDelRol();
    }//GEN-LAST:event_jButtonPasarTodasARolActionPerformed

    private void jButtonQuitarTodasDeRolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitarTodasDeRolActionPerformed
        // TODO add your handling code here:
        actividadesDelRol.removeAll(actividades);
        actualizarListaActividadesDelRol();
    }//GEN-LAST:event_jButtonQuitarTodasDeRolActionPerformed

    private void jButtonPasarARolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPasarARolActionPerformed
        // TODO add your handling code here:
        List<Actividad> actividadesAPasar = jListActividades.getSelectedValuesList();
        for(Actividad a : actividadesAPasar) {
            if(!actividadesDelRol.contains(a)){
                actividadesDelRol.add(a);
            }
        }
        actualizarListaActividadesDelRol();
    }//GEN-LAST:event_jButtonPasarARolActionPerformed

    private void jButtonQuitarDeRolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitarDeRolActionPerformed
        // TODO add your handling code here:
        List<Actividad> actividadesASacar = jListActividadesDelRol.getSelectedValuesList();
        actividadesDelRol.removeAll(actividadesASacar);
        actualizarListaActividadesDelRol();
    }//GEN-LAST:event_jButtonQuitarDeRolActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed
        // TODO add your handling code here:
        if (rol == null) {
            //Es un rol nuevo.
            if ("".equals(jTextFieldNombre.getText().trim())) {
                JOptionPane.showMessageDialog(this, "El rol debe tener un nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldNombre.requestFocus();
                jTextFieldNombre.selectAll();
            } else if (actividadesDelRol.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe agregar al menos una actividad al rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jListActividades.requestFocus();
            } else {
                try {
                    if (!sisUsuarios.nombreDeRolValido(jTextFieldNombre.getText().trim())) {
                        JOptionPane.showMessageDialog(this, "Ya existe un rol con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        jTextFieldNombre.requestFocus();
                        jTextFieldNombre.selectAll();
                    } else if (sisUsuarios.agregarRol(jTextFieldNombre.getText().trim(), actividadesDelRol)) {
                        JOptionPane.showMessageDialog(this, "Rol creado correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        reiniciarVentana();
                    } else {
                        JOptionPane.showMessageDialog(this, "Error al guardar el rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    String stakTrace = util.Util.obtenerStackTraceEnString(e);
                    SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
                
                    JOptionPane.showMessageDialog(this, "Error al guardar el rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    reiniciarVentana();
                }
            }
        } else //Es una modificacion de un rol
        {
            if ("".equals(jTextFieldNombre.getText().trim())) {
                JOptionPane.showMessageDialog(this, "El rol debe tener un nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jTextFieldNombre.requestFocus();
                jTextFieldNombre.selectAll();
            } else if (actividadesDelRol.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debe agregar al menos una actividad al rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                jListActividades.requestFocus();
            } else {
                try {
                    if (!rol.getNombre().equals(jTextFieldNombre.getText().trim())) {
                        if (!sisUsuarios.nombreDeRolValido(jTextFieldNombre.getText().trim())) {
                            JOptionPane.showMessageDialog(this, "Ya existe un rol con ese nombre.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            jTextFieldNombre.requestFocus();
                            jTextFieldNombre.selectAll();
                        } else  {
                            rol.setActividades(actividadesDelRol);
                            if (sisUsuarios.actualizarRol(rol)) {
                                JOptionPane.showMessageDialog(this, "Rol actualizado correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                                reiniciarVentana();
                            } else {
                                JOptionPane.showMessageDialog(this, "Error al guardar el rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                    } else {
                        rol.setActividades(actividadesDelRol);
                        if (sisUsuarios.actualizarRol(rol)) {
                            JOptionPane.showMessageDialog(this, "Rol actualizado correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
                            reiniciarVentana();
                        } else {
                            JOptionPane.showMessageDialog(this, "Error al guardar el rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                } catch (Exception e) {
                    String stakTrace = util.Util.obtenerStackTraceEnString(e);
                    SistemaUsuarios.getInstance().registrarExcepcion(e.toString(), stakTrace);
                
                    JOptionPane.showMessageDialog(this, "Error al guardar el rol.", "Información", JOptionPane.INFORMATION_MESSAGE);
                    reiniciarVentana();
                }
            }
        }
    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        // TODO add your handling code here:
        if(jComboBoxRoles.getSelectedIndex() == 0) {
             JOptionPane.showMessageDialog(this, "Debe seleccionar un rol para modificar.", "Información", JOptionPane.INFORMATION_MESSAGE);
        } else {
            rol = (Rol)jComboBoxRoles.getSelectedItem();
            cargarRol();
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void cargarRol(){
        actividadesDelRol = rol.getActividades();
        actualizarListaActividadesDelRol();
        jTextFieldNombre.setText(rol.getNombre());
    }
    
    private void reiniciarVentana() {
        try {
            jTextFieldNombre.setText("");
            actividadesDelRol = new ArrayList<>();
            actualizarListaActividadesDelRol();
            jComboBoxRoles.removeAllItems();
            jComboBoxRoles.addItem("");
            roles = sisUsuarios.devolverRoles();
            for (Rol r : roles) {
                jComboBoxRoles.addItem(r);
            }
        } catch (Exception exp) {
            String stakTrace = util.Util.obtenerStackTraceEnString(exp);
            SistemaUsuarios.getInstance().registrarExcepcion(exp.toString(), stakTrace);
            JOptionPane.showMessageDialog(MantenimientoRoles.this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarListaActividades() {
        try {
            actividades = sisUsuarios.devolverActividades();
            
            DefaultListModel modelo = new DefaultListModel();
            for (Actividad a : actividades) {
                modelo.addElement(a);
            }
            
            jListActividades.setModel(modelo);
        }  catch (Exception exp) {
            String stakTrace = util.Util.obtenerStackTraceEnString(exp);
            SistemaUsuarios.getInstance().registrarExcepcion(exp.toString(), stakTrace);
            JOptionPane.showMessageDialog(MantenimientoRoles.this, Constantes.MensajeDeErrorGenerico, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void actualizarListaActividadesDelRol() {

        DefaultListModel modelo = new DefaultListModel();
        for (Actividad a : actividadesDelRol) {
            modelo.addElement(a);
        }

        jListActividadesDelRol.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRoles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRoles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRoles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenimientoRoles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MantenimientoRoles dialog = new MantenimientoRoles(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JButton jButtonPasarARol;
    private javax.swing.JButton jButtonPasarTodasARol;
    private javax.swing.JButton jButtonQuitarDeRol;
    private javax.swing.JButton jButtonQuitarTodasDeRol;
    private javax.swing.JButton jButtonSalir;
    private javax.swing.JComboBox jComboBoxRoles;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JList jListActividades;
    private javax.swing.JList jListActividadesDelRol;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables
}
